// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  projects Project[]
  logos   UserLogo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  domain      String?
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  consentBanners  ConsentBanner[]
  trackingScripts TrackingScript[]
  analytics       BannerAnalytics[]
}

model ConsentBanner {
  id          String   @id @default(cuid())
  name        String
  config      Json     // Banner configuration (colors, text, position, etc.)
  code        String   @db.Text // Generated HTML/JS code
  isActive    Boolean  @default(true)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project  Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  analytics BannerAnalytics[]
}

model TrackingScript {
  id            String   @id @default(cuid())
  name          String
  scriptContent String   @db.Text
  consentLevel  String   // 'strictly-necessary', 'analytics', 'marketing', 'preferences'
  isEnabled     Boolean  @default(true)
  projectId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model BannerAnalytics {
  id        String   @id @default(cuid())
  bannerId  String
  projectId String
  event     String   // 'view', 'accept', 'reject', 'preferences'
  userAgent String?
  ipAddress String?
  country   String?
  createdAt DateTime @default(now())

  banner  ConsentBanner @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  project Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model UserLogo {
  id        String   @id @default(cuid())
  userId    String
  filename  String
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
